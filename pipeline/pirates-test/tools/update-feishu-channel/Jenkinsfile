#!/usr/bin/env groovy

CHAT_ID = ''

OUTPUT_FILE = 'channel.yaml'

FEISHU_CONF = feishuNotify.loadFeishuConf()

def getChatId(name) {
    def token

    withCredentials([usernamePassword(credentialsId: FEISHU_CONF.credential, usernameVariable: 'APP_ID', passwordVariable: 'APP_SECRET')]) {
        token = feishuNotify.getAccessToken(FEISHU_CONF.tokenUrl, env.APP_ID, env.APP_SECRET)
    }

    def response = httpRequest(
        url: FEISHU_CONF.chatListUrl,
        customHeaders: [[name: 'Authorization', value: "Bearer ${token}", maskValue: true]],
        httpMode: 'GET'
    )

    def statusCode = response.status
    def contentJson = readJSON(text: response.content)
    def code = contentJson.code
    if (code == 0) {
        def chatList = contentJson.data.groups
        def size = chatList.size()
        for (int i = 0; i < size; i++) {
            if (chatList[i].name == name) {
                return chatList[i].chat_id
            }
        }
    } else {
        echo "Get chat list failed, error ${code}, message: ${contentJson.msg}"
        return ''
    }
}

def validateId(id) {
    def channels = FEISHU_CONF.channels
    def size = channels.size()

    for (int i = 0; i < size; i++) {
        if (channels[i].id == id) {
            echo "ERROR: Requested id ${id} already exists."
            currentBuild.result = 'FAILURE'
        }
    }
}

def validateChatId(chatId) {
    def channels = FEISHU_CONF.channels
    def size = channels.size()

    for (int i = 0; i < size; i++) {
        if (channels[i].chatId == chatId) {
            echo 'ERROR: Requested chat channel already exists.'
            currentBuild.result = 'FAILURE'
        }
    }
}

def writeToFile(channelId, channelName, chatId) {
    def data = [
        'id': "${channelId}",
        'name': "${channelName}",
        'chatId': "${chatId}"
    ]
    writeYaml file: OUTPUT_FILE, data: data
}

pipeline {
    agent any
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(
            daysToKeepStr: '15',
            artifactNumToKeepStr: '20'
        ))
        ansiColor('xterm')
    }
    parameters {
        string(name: 'ID',
            defaultValue: '',
            description: 'Unique defined id for a chat channel. Example: JenkinsIntranet',
            trim: true)
        string(name: 'NAME',
            defaultValue: '',
            description: 'Name of the chat channel. Example: [Pirates]Jenkins')
    }
    stages {
        stage('Clean') {
            steps {
                cleanWs()
            }
        }
        stage('Get Chat ID') {
            steps {
                script {
                    validateId(env.ID)
                    CHAT_ID = getChatId(params.NAME)
                    if (CHAT_ID == '') {
                        echo 'ERROR: Requested chat channel not found.'
                        currentBuild.result = 'FAILURE'
                    } else {
                        validateChatId(CHAT_ID)
                    }
                }
            }
        }
        stage('Archive') {
            steps {
                writeToFile(params.ID, params.NAME, CHAT_ID)
                archiveArtifacts artifacts: OUTPUT_FILE, onlyIfSuccessful: true
            }
        }
    }
}
